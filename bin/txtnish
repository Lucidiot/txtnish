#!/bin/sh

VERSION="0.2"
TAB=$(printf "\t")

limit=20
formatter="fmt"
use_pager=1
use_color=1
always_update=1
sort_order=descending
twtfile=~/twtxt.txt
disclose_identity=0
http_backend=wget
max_procs=20
xargs_parallel=1
editor=${EDITOR:-vi}
pager=${PAGER:-less -R}

program_name=${0##*/}

config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/txtnish/"
config_file="$config_dir/config"
follow_file="$config_dir/following"
draft_file="$config_dir/draft"

cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/txtnish/"
log_dir="$cache_dir/logs"

color_nick=yellow
color_time=blue
color_hashtag=cyan
color_mention=yellow

die () {
	printf "$program_name: %s\n" "$1" >&2
	exit "${2:-1}"
}

create_dir () {
	[ -d "$1" ] || mkdir -p "$1"
}

read_config () {
	if [ -e "$config_file" ];then
		. "$config_file"
	fi
}

args_for_wget () {
	printf "%s\n" --user-agent "$user_agent" --timestamping -P "$cache_dir/" -x -nv -a "$log_dir/http.log.$i" "$url"
}

args_for_curl () {
	printf "%s\n" --user-agent "$user_agent" -L --stderr "$log_dir/http.log.$i" -Ss -o "$cache_dir/$nick.txt" -z "$cache_dir/$nick.txt" "$url"
}

args_for_unknown () {
	printf "%s\n" "$nick" "$url"
}

update () {
	[ -f "$follow_file" ] || return

	if [ "$disclose_identity" -eq 1 ] && [ -n "$twturl" ];then
		user_agent="txtnish/$VERSION (+${twturl}; @${nick:-$USER})"
	else
		user_agent="txtnish/$VERSION (+https://github.com/mdom/txtnish)"
	fi

	case $http_backend in
		wget ) _no_args=10; _get_args=args_for_wget ;;
		curl ) _no_args=11; _get_args=args_for_curl ;;
		*    ) _no_args=2;  _get_args=args_for_unknown ;;
	esac

	i=0
	while read nick url;do
		$_get_args
		i=$(( $i + 1 ))
	done < "$follow_file" | xargs -d "\n" -n$_no_args -P "$max_procs" "$http_backend" $http_backend_args
	_http_rc=$?

	cat "$log_dir"/http.log.* > "$log_dir/http.log"
	rm "$log_dir"/http.log.*

	if [ "$_http_rc" -ne 0 ] ;then
		printf "http_backend returned errors, see "$log_dir/wget.log" for details.\n" >&2
	fi
}

maybe_update () {
	if [ "$always_update" -eq 1 ];then
		update
	fi
}

format_msg () {
	awk -vuse_color="$use_color" -vnick="$color_nick" \
	    -vhashtag="$color_hashtag" -vtime="$color_time" -vmention="$color_mention" '
		BEGIN {
			OFS=FS="\t"
			csi = "\033["
			reset = csi "0m"
			fg = 3
			bg = 4
			colors["black"] = 0
			colors["red"] = 1
			colors["green"] = 2
			colors["yellow"] = 3
			colors["blue"] = 4
			colors["magenta"] = 5
			colors["cyan"] = 6
			colors["white"] = 7
		}
	{
		if ( use_color ) {
			gsub(/#[[:alnum:]]+/, csi fg colors[hashtag] "m&" reset, $4)
			gsub(/@[[:alnum:]]+/, csi fg colors[mention] "m&" reset, $4)
			$1 = csi fg colors[nick] "m" $1 reset
			$3 = csi fg colors[time] "m" $3 reset
		}
		print
	}' \
	| while read nick url ts msg;do
		printf "* %b (%b)\n" "$nick" "$ts"
		if type "$formatter" >/dev/null 2>&1;then
			printf "%s\n" "$msg" | $formatter
		else
			printf "%s\n" "$msg"
		fi
		printf "\n"
	done
}

limit () {
	if [ -n "$limit" ];then
		sed "${limit}q"
	else
		cat
	fi
}

sort_tweets () {
	if [ "$sort_order" = "ascending" ];then
		_sort_switches=
	elif [ "$sort_order" = "descending" ];then
		_sort_switches=-r
	else
		die "Unknown sort_order '$sort_order'. Must be either ascending or descending."
	fi

	awk -F"$TAB" '
		BEGIN { OFS=FS; OFMT="%f" }
		$3 && $4 {
			ts=$3
			sub(/Z$/,"+00:00",ts)
			no_fields = split(ts,ta,/[T:+.-]/)
			seconds = (ta[1]-1970)*31557600 + ta[2] * 2628000 + ta[3] * 86400 + ta[4] * 3600 + ta[5] * 60 + ta[6]
			if ( no_fields == 9 ) {
				offset = ta[8] * 3600 + ta[9] * 60
				fracsecs=ta[7]
			}
			else {
				offset = ta[7] * 3600 + ta[8] * 60
				fracsecs=0
			}
			mod = substr(ts,length(ts)-5,1)
			if ( mod == "+" ) {
				seconds -= offset
			} else {
				seconds += offset
			}
			print seconds, fracsecs, $0
		}
	' | sort $_sort_switches -n -k1,2 | cut -d "$TAB" -f 3-
}

reply () {
	maybe_update
	use_pager=0
	use_color=0
	if [ -n "$1" ];then
		view "$1" | sed -e 's/^/# /' -e 's/^# $//' > "$draft_file"
	else
		timeline | sed -e 's/^/# /' -e 's/^# $//' > "$draft_file"
	fi
	$editor "$draft_file"
	tempfile="$draft_file.$$"
	sed -e '/^# /d' -e '/^[[:space:]]*$/d' "$draft_file" > "$tempfile"
	mv "$tempfile" "$draft_file"
	if [ -s "$draft_file" ];then
		draft_to_twtfile
	fi
}

maybe_pager () {
	if [ "$use_pager" -eq 1 ];then
		$pager
	else
		cat
	fi
}

twtfile_for () {
	if [ "$http_backend" != wget ];then
		_twtfile_for="$cache_dir/$nick.txt"
	else
		_twtfile_for=~/.cache/txtnish/${2#*://}
		_twtfile_for=${_twtfile_for%%#*}
		if [ -d "$_twtfile_for" ] && [ -e "$_twtfile_for/index.html" ];then
			_twtfile_for="$_twtfile/index.html"
		fi
	fi
}

in_list () {
	case " $1 " in
		*\ $2\ * ) return 0 ;;
		* ) return 1 ;;
	esac
}

timeline () {
	maybe_update;
	while read nick url;do

		if [ $# -ne 0 ] && ! in_list "$*" "$nick";then
			continue
		fi

		twtfile_for "$nick" "$url"
		[ -e "$_twtfile_for" ] || continue
		prefix_nick_url "$nick" "$url" < "$_twtfile_for"
	done < "$follow_file" | display_tweets
}

prefix_nick_url () {
	_nick=$1
	_url=$2
	_twtfile=$3
	awk -vnick="$_nick" -vurl="$_url" 'BEGIN{OFS="\t"}{print nick,url,$0}'
}

filter_tweets () {
	filter_expr="${filter_expr:-1}"
	awk -F"\t" '{nick=$1; url=$2; ts=$3; msg=$4; if ('"$filter_expr"') { print } }'
}

display_tweets () {
	remove_escape_seq | sort_tweets | filter_tweets | limit | collapse_mentions | format_msg | maybe_pager
}

remove_escape_seq () {
	sed 's/[^[:print:][:space:]]//g'
}

collapse_mentions () {
	## TODO this *has* to be easier
	awk -v follow_file="$follow_file" '
		BEGIN {
			FS=" "
			while ( (getline < follow_file) > 0 ) {
				urls[$2]=$1
			}
			FS="\t"
			OFS=FS
		}
		{
			new_msg=""
			while ( match($4,/@<[^>]+>/) ) {
				new_msg = new_msg substr($4,1,RSTART-1)
				n = split(substr($4,RSTART+2,RLENGTH-3),fields," ")
				if ( n == 1 ) {
					url = fields[1]
				} else {
					url = fields[2]
				}
				if ( url in urls ) {
					new_msg = new_msg "@" urls[url]
				}
				else {
					new_msg = new_msg substr($4,RSTART,RLENGTH)
				}
				$4 = substr($4,RSTART+RLENGTH)
			}
			new_msg = new_msg $4
			$4=new_msg
			print
		}
	'
}

expand_mentions () {
	awk -v follow_file="$follow_file" '
		BEGIN {
			FS=" "
			while ( (getline < follow_file) > 0 ) {
				nicks[$1]=$2
			}
			FS="\t"
			OFS=FS
		}
		{
			## TODO Bruteforcing, replace with something sane in the future
			for ( nick in nicks ) {
				gsub("@" nick, "@<" nick " " nicks[nick] ">", $2)
			}
			print
		}
	'
}

follow () {
	new_nick=$1
	new_url=$2

	[ -n "$new_nick" ] || usage "Required parameter NICK is missing."
	[ -n "$new_url"  ] || usage "Required parameter URL is missing."

	tempfile="$follow_file.$$"
	while read nick url;do
		if [ "$nick" = "$new_nick" ] || [ "$url" = "$new_url" ];then
			die "You're already following $nick at $url."
		fi
		printf "$nick $url\n";
	done < "$follow_file" > "$tempfile"
	printf "$new_nick $new_url\n" >> "$tempfile";
	mv "$tempfile" "$follow_file"
}

unfollow () {
	old_nick=$1
	[ -n "$old_nick" ] || usage "Required parameter NICK is missing."
	tempfile="$follow_file.$$"
	removed=
	while read nick url;do
		if [ "$nick" = "$old_nick" ];then
			removed=1
		else
			printf "$nick $url\n";
		fi
	done < "$follow_file" > "$tempfile"
	if [ -n "$removed" ];then
		mv "$tempfile" "$follow_file"
	else
		die "You're not following $old_nick."
	fi
}

following () {
	cat "$follow_file"
}

tweet () {
	: >"$draft_file"

	if [ $# -eq 0 ];then
		if [ -t 0 ];then
			"$EDITOR" "$draft_file"
		else
			cat > "$draft_file"
		fi
	else
		printf "%s\n" "$@" > "$draft_file"
	fi
	draft_to_twtfile
}


draft_to_twtfile () {
	_fracsecs=0
	_timestamp=$(TZ=C date "+%Y-%m-%dT%H:%M:%S.%%06iZ")
	while read msg;do
		[ -n "$msg" ] || continue
		printf "$_timestamp\t%s\n" "$_fracsecs" "$msg"
		_fracsecs=$(( $_fracsecs + 1 ))
	done < "$draft_file" | expand_mentions >> "$twtfile"
	publish
}

publish () {
	post_tweet_hook
}

cleanup () {
	[ -e "$tempfile" ] && rm "$tempfile"
}

post_tweet_hook () {
	:
}

call_mode () {
	while getopts ":$options" opt;do
		case $opt in
			l ) limit="$OPTARG" ;;
			h ) usage ;;
			p ) use_pager=1 ;;
			P ) use_pager=0 ;;
			u ) always_update=1 ;;
			U ) always_update=0 ;;
			a ) sort_order=ascending ;;
			d ) sort_order=descending ;;
			N ) max_procs="$OPTARG" ;;
			S ) filter_expr="$OPTARG" ;;
			: ) usage "Option -$OPTARG requires an argument." ;;
			\? ) usage "Invalid option -$OPTARG." ;;
		esac
	done
	shift $(( OPTIND - 1 ))
	$mode "$@"
}

usage_main () {
	if [ -n "$1" ];then
		printf "$1\n" >&2;
		exec >&2
	fi
	cat <<-EOF
		usage: $program_name COMMAND [OPTIONS...]

		  Command:
		    tweet          Append a new tweet to your twtxt file.
		    timeline       Retrieve your personal timeline.
		    follow         Add a new source to your followings.
		    unfollow       Remove an existing source from your followings.
		    following      Return the list of sources you're following.
		    reply          Reply to tweets.
		    publish        Publish your twtfile.

		  Options:
		    -h      Print a help message and exit.
		    -v      Print version and exit.
		    -c FILE Specify a custom config file location.
		    -B CMD  Specify which http backend to use, can be wget or curl.

EOF
	if [ -n "$1" ];then
		exit 1
	else
		exit 0
	fi
}

usage () {
	_err=$1
	if [ -n "$_err" ];then
		printf "$_err\n" >&2
		exec >&2
	fi

	cat <<-EOF
		usage: $program_name $mode [OPTIONS...]${arguments:+ $arguments}

		Synopsis:
		  $synopsis

		Options:
EOF

	while [ -n "$options" ] ;do
		c=${options%${options#?}}
		case $c in
			h ) printf "  -h     Print a help message and exit.\n" ;;
			l ) printf "  -l NUM Limit total numer of tweets shown.\n" ;;
			a ) printf "  -a     Sort timeline in ascending order.\n" ;;
			d ) printf "  -d     Sort timeline in descending order.\n" ;;
			p ) printf "  -p     Use pager to display content.\n" ;;
			P ) printf "  -P     Do not use pager to display content.\n" ;;
			u ) printf "  -u     Update sources.\n" ;;
			U ) printf "  -U     Do not update sources.\n" ;;
			N ) printf "  -N NUM Use NUM parallel download processes.\n" ;;
			S ) printf "  -S EXP Filter tweets\n" ;;
		esac
		options=${options#?}
	done

	## Always end usage with a empty line
	printf "\n"

	if [ -n "$_err" ];then
		exit 1
	else
		exit 0
	fi
}

trap cleanup EXIT

create_dir "$config_dir"
create_dir "$cache_dir"
create_dir "$log_dir"

while getopts ":hvc:B:" opt;do
	case $opt in
		v ) printf "$VERSION\n"; exit 0  ;;
		h ) usage_main ;;
		B ) http_backend="$OPTARG" ;;
		c )
			config_file="$OPTARG"
			if ! [ -e "$config_file" ];then
				die "Missing configuration file '$config_file'";
			fi
			;;
		: ) usage_main "Option -$OPTARG requires an argument." ;;
		\? ) usage_main "Invalid option -$OPTARG." ;;
	esac
done

shift $(($OPTIND - 1))

read_config

mode=$1

if [ -z "$mode" ];then
	usage_main
	exit 1
fi

shift

case $mode in
	update )
		synopsis="Fetching new twtfiles from all your sources."
		options="hN:"
		call_mode "$@"
		;;
	follow )
		synopsis="Add a new source to your followings."
		arguments="NICK SOURCE"
		options="h"
		call_mode "$@"
		;;
	unfollow )
		synopsis="Remove an existing source from your followings."
		arguments="NICK"
		options="h"
		call_mode "$@"
		;;
	following )
		synopsis="Return the list of sources you're following."
		options="h"
		call_mode "$@"
		;;
	timeline | view )
		synopsis="Display timeline."
		arguments="[NICK...]"
		options="hl:adpPuUN:S:"
		call_mode "$@"
		;;
	reply )
		synopsis="Reply to tweets."
		arguments="[NICK]"
		options="hl:aduUN:S:"
		call_mode "$@"
		;;
	publish )
		synopsis="Publish your twtfile."
		options="h"
		call_mode "$@"
		;;
	tweet )
		synopsis="Append a new tweet to your twtxt file."
		arguments="[TWEET...]"
		options="h"
		call_mode "$@"
		;;
	* ) printf "Unknown mode $mode.\n" >&2; usage_main; exit 1;;
esac

exit 0
