#!/bin/sh

VERSION="0.2"
TAB=$(printf "\t")
ESC="\033"
limit=20
formatter="fmt"
use_pager=1
use_color=1
twtfile=~/twtxt.txt
user_agent="txtnish/0.1 (+https://github.com/mdom/txtnish)"

program_name=${0##*/}

config_dir="$HOME/.config/txtnish/"
config_file="$config_dir/config"
follow_file="$config_dir/following"
draft_file="$config_dir/draft"
cache_dir="$HOME/.cache/txtnish/"

## Colors
csi="${ESC}["
reset="${csi}0m"
black=0
red=1
green=2
yellow=3
blue=4
magenta=5
cyan=6
white=7

fg=3
bg=4

color_nick=$yellow
color_time=$blue

die () {
	printf "$program_name: %s\n" "$1"
	exit "${2:-1}"
}

create_dir () {
	[ -d "$1" ] || mkdir -p "$1"
}

read_config () {
	if [ -e "$config_file" ];then
		. "$config_file"
	fi
}

update () {
	urls | xargs -n1 -P20 wget --user-agent="$user_agent" --timestamping -P ~/.cache/txtnish/ -x -q
}

urls () {
	[ -f "$follow_file" ] || return
	## i'm not using awk here as the number of urls is usually pretty short.
	while read _ url;do
		printf "%s\n" "$url"
	done < "$follow_file"
}

format_msg () {
	while read nick url ts msg;do
		if [ "$use_color" -eq 1 ];then
			nick="${csi}${fg}${color_nick}m${nick}${reset}"
			ts="${csi}${fg}${color_time}m${ts}${reset}"
		fi
		printf "* %b (%b)\n" "$nick" "$ts"
		if type "$formatter" >/dev/null 2>&1;then
			printf "%s\n" "$msg" | $formatter
		else
			printf "%s\n" "$msg"
		fi
		printf "\n"
	done
}

limit () {
	if [ -n "$limit" ];then
		sed "${limit}q"
	else
		cat
	fi
}

sort_tweets () {
	awk -F"$TAB" '
		BEGIN { OFS=FS; OFMT="%f" }
		$3 && $4 {
			ts=$3
			sub(/Z$/,"+00:00",ts)
			no_fields = split(ts,ta,/[T:+.-]/)
			seconds = (ta[1]-1970)*31557600 + ta[2] * 2628000 + ta[3] * 86400 + ta[4] * 3600 + ta[5] * 60 + ta[6]
			if ( no_fields == 9 ) {
				offset = ta[8] * 3600 + ta[9] * 60
				fracsecs=ta[7]
			}
			else {
				offset = ta[7] * 3600 + ta[8] * 60
				fracsecs=0
			}
			mod = substr(ts,length(ts)-5,1)
			if ( mod == "+" ) {
				seconds += offset
			} else {
				seconds -= offset
			}
			print seconds, fracsecs, $0
		}
	' | sort -nr -k1,2 | cut -d "$TAB" -f 3-
}

pager () {
	if [ "$use_pager" -eq 1 ];then
		${PAGER:-less}
	else
		cat
	fi
}

url_to_file () {
	_twtfile=~/.cache/txtnish/${1#*://}
	_twtfile=${_twtfile%%#*}
	if [ -d "$_twtfile" ] && [ -e "$_twtfile/index.html" ];then
		_twtfile="$_twtfile/index.html"
	fi
	if ! [ -e "$_twtfile" ];then
		_twtfile=
	fi
	_url_to_file="$_twtfile"
}

timeline () {
	update;
	while read nick url;do
		url_to_file "$url"
		[ -n "$_url_to_file" ] || continue
		add_nick_url "$nick" "$url" "$_url_to_file"
	done < "$follow_file" | display_tweets
}

add_nick_url () {
	_nick=$1
	_url=$2
	_twtfile=$3
	awk -vnick="$_nick" -vurl="$_url" 'BEGIN{OFS="\t"}{print nick,url,$0}' < "$_twtfile"
}

display_tweets () {
	sort_tweets | limit | collapse_mentions | format_msg | pager
}

collapse_mentions () {
	## TODO this *has* to be easier
	awk -v follow_file="$follow_file" '
		BEGIN {
			FS=" "
			while ( (getline < follow_file) > 0 ) {
				urls[$2]=$1
			}
			FS="\t"
			OFS=FS
		}
		{
			new_msg=""
			while ( match($4,/@<[^>]+>/) ) {
				new_msg = new_msg substr($4,1,RSTART-1)
				n = split(substr($4,RSTART+2,RLENGTH-3),fields," ")
				if ( n == 1 ) {
					url = fields[1]
				} else {
					url = fields[2]
				}
				if ( url in urls ) {
					new_msg = new_msg "@" urls[url]
				}
				else {
					new_msg = new_msg substr($4,RSTART,RLENGTH)
				}
				$4 = substr($4,RSTART+RLENGTH)
			}
			new_msg = new_msg $4
			$4=new_msg
			print
		}
	'
}

expand_mentions () {
	awk -v follow_file="$follow_file" '
		BEGIN {
			FS=" "
			while ( (getline < follow_file) > 0 ) {
				nicks[$1]=$2
			}
			FS="\t"
			OFS=FS
		}
		{
			## TODO Bruteforcing, replace with something sane in the future
			for ( nick in nicks ) {
				gsub("@" nick, "@<" nick " " nicks[nick] ">", $2)
			}
			print
		}
	'
}

view () {
	## TODO update only the single url
	update;
	_nick=$1
	[ -n "$_nick" ] || usage "Required parameter NICK is missing."
	while read nick url;do
		if [ "$nick" = "$_nick" ] ;then
			url_to_file "$url"
			[ -n "$_url_to_file" ] || continue
			add_nick_url "$nick" "$url" "$_url_to_file" | display_tweets
			return
		fi
	done < "$follow_file"
}

follow () {
	new_nick=$1
	new_url=$2

	[ -n "$new_nick" ] || usage "Required parameter NICK is missing."
	[ -n "$new_url"  ] || usage "Required parameter URL is missing."

	tempfile="$follow_file.$$"
	while read nick url;do
		if [ "$nick" = "$new_nick" ] || [ "$url" = "$new_url" ];then
			die "You're already following $nick at $url."
		fi
		printf "$nick $url\n";
	done < "$follow_file" > "$tempfile"
	printf "$new_nick $new_url\n" >> "$tempfile";
	mv "$tempfile" "$follow_file"
}

unfollow () {
	old_nick=$1
	[ -n "$old_nick" ] || usage "Required parameter NICK is missing."
	tempfile="$follow_file.$$"
	removed=
	while read nick url;do
		if [ "$nick" = "$old_nick" ];then
			removed=1
		else
			printf "$nick $url\n";
		fi
	done < "$follow_file" > "$tempfile"
	mv "$tempfile" "$follow_file"
	if [ -z "$removed" ];then
		die "You're not following $old_nick."
	fi
}

following () {
	cat "$follow_file"
}

tweet () {
	: >"$draft_file"

	if [ $# -eq 0 ];then
		if [ -t 0 ];then
			"$EDITOR" "$draft_file"
		else
			cat > "$draft_file"
		fi
	else
		printf "%s\n" "$@" > "$draft_file"
	fi

	_fracsecs=0
	_timestamp=$(TZ=C date "+%Y-%m-%dT%H:%M:%S.%%06iZ")

	while read msg;do
		[ -n "$msg" ] || continue
		printf "$_timestamp\t%s\n" "$_fracsecs" "$msg"
		_fracsecs=$(( $_fracsecs + 1 ))
	done < "$draft_file" | expand_mentions >> "$twtfile"
	post_tweet_hook
}

cleanup () {
	[ -e "$tempfile" ] && rm "$tempfile"
}

post_tweet_hook () {
	:
}

call_mode () {
	while getopts ":$options" opt;do
		case $opt in
			l ) limit="$OPTARG" ;;
			h ) usage ;;
			: ) usage "Option -$OPTARG requires an argument." ;;
			\? ) usage "Invalid option -$OPTARG." ;;
		esac
	done
	shift $(( OPTIND - 1 ))
	$mode "$@"
}

usage_main () {
	if [ -n "$1" ];then
		printf "$1\n" >&2;
	fi
	cat <<-EOF
		usage: $program_name COMMAND [OPTIONS...]

		  Command:
		    tweet          Append a new tweet to your twtxt file.
		    timeline       Retrieve your personal timeline.
		    view           Show feed of given source.
		    follow         Add a new source to your followings.
		    unfollow       Remove an existing source from your followings.
		    following      Return the list of sources you're following.

		  Options:
		    -h      Print a help message and exit.
		    -v      Print version and exit.
		    -c FILE Specify a custom config file location.

EOF
	if [ -n "$1" ];then
		exit 1
	else
		exit 0
	fi
}

usage () {
	_err=$1
	if [ -n "$_err" ];then
		printf "$_err\n" >&2
	fi

	cat <<-EOF
		usage: $program_name $mode [OPTIONS...]${arguments:+ $arguments}

		Synopsis:
		  $synopsis

		Options:
EOF

	while [ -n "$options" ] ;do
		c=${options%${options#?}}
		case $c in
			h ) printf "  -h     Print a help message and exit.\n" ;;
			l ) printf "  -l NUM Limit total numer of tweets shown.\n" ;;
		esac
		options=${options#?}
	done

	## Always end usage with a empty line
	printf "\n"

	if [ -n "$_err" ];then
		exit 1
	else
		exit 0
	fi
}

trap cleanup EXIT

create_dir "$config_dir"
create_dir "$cache_dir"

while getopts ":hvc:" opt;do
	case $opt in
		v ) printf "$VERSION\n"; exit 0  ;;
		h ) usage_main ;;
		c )
			config_file="$OPTARG"
			if ! [ -e "$config_file" ];then
				die "Missing configuration file '$config_file'";
			fi
			;;
		: ) usage_main "Option -$OPTARG requires an argument." ;;
		\? ) usage_main "Invalid option -$OPTARG." ;;
	esac
done

shift $(($OPTIND - 1))

read_config

mode=$1

if [ -z "$mode" ];then
	usage_main
	exit 1
fi

shift

case $mode in
	update )
		synopsis="Fetching new twtfiles from all your sources."
		options="h"
		call_mode "$@"
		;;
	follow )
		synopsis="Add a new source to your followings."
		arguments="NICK SOURCE"
		options="h"
		call_mode "$@"
		;;
	unfollow )
		synopsis="Remove an existing source from your followings."
		arguments="NICK"
		options="h"
		call_mode "$@"
		;;
	following )
		synopsis="Return the list of sources you're following."
		options="h"
		call_mode "$@"
		;;
	timeline )
		synopsis="Retrieve your personal timeline."
		options="hl:"
		call_mode "$@"
		;;
	tweet )
		synopsis="Append a new tweet to your twtxt file."
		arguments="[TWEET...]"
		options="h"
		call_mode "$@"
		;;
	view )
		synopsis="Show feed of given source."
		arguments="NICK"
		options="hl:"
		call_mode "$@"
		;;
	* ) printf "Unknown mode $mode.\n" >&2; usage_main; exit 1;;
esac

exit 0
