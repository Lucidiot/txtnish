#!/bin/sh

VERSION="0.2"

###################
## Default config #
###################

limit=20
formatter="fmt"
use_pager=1
use_color=1
always_update=1
sort_order=descending
twtfile=~/twtxt.txt
disclose_identity=0
http_backend=curl
max_procs=20
xargs_parallel=1
editor=${EDITOR:-vi}
pager=${PAGER:-less -R}
color_nick=yellow
color_time=blue
color_hashtag=cyan
color_mention=yellow
sign_twtfile=0
ipfs_publish=0
ipfs_wrap_with_dir=0
ipfs_recursive=0
ipfs_gateway=http://localhost:8080

######################
## Runtime variables #
######################

program_name=${0##*/}
config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/txtnish/"
config_file="$config_dir/config"
follow_file="$config_dir/following"
draft_file="$config_dir/draft"
cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/txtnish/"
log_dir="$cache_dir/logs"

#####################
## Helper Functions #
#####################

# Description: Check if command is in path
# Synopsis: have_cmd COMMAND
# Returns: success if command is found; fails otherwise

have_cmd () {
	type "$1" >/dev/null 2>&1
}

# Description: Print error message and exit
# Synopsis: die MESSAGE RETURN_CODE
# Returns: nothing

die () {
	printf "$program_name: %s\n" "$1" >&2
	exit "${2:-1}"
}

# Description: Create dir unless it exists
# Synopsis: create_dir DIR
# Returns: nothing

create_dir () {
	[ -d "$1" ] || mkdir -p "$1"
}

# Description: Source configuration file if it exists
# Synopsis: read_config
# Returns: nothing

read_config () {
	if [ -e "$config_file" ];then
		. "$config_file"
	fi
}

# Description: Print arguments for wget on stdout for xargs
# Synopsis: args_for_wget NICK URL COUNTER
# Returns: Nothing

args_for_wget () {
	printf "%s\n" \
		--user-agent "$user_agent" \
		--timestamping \
		--directory-prefix "$cache_dir/wget/" \
		--force-directories \
		--no-verbose \
		--append-output "$log_dir/http.log.$1" \
		"$2"
}

# Description: Print arguments for curl on stdout for xargs
# Synopsis: args_for_curl NICK URL COUNTER
# Returns: Nothing

args_for_curl () {
	printf "%s\n" \
		--user-agent "$user_agent" \
		--location \
		--stderr "$log_dir/http.log.$1" \
		--show-error \
		--silent \
		--output "$cache_dir/twtfiles/$1.txt" \
		--time-cond "$cache_dir/twtfiles/$1" \
		"$2"
}


# Description: Print arguments for generic http backend on stdout for xargs
# Synopsis: args_for_curl NICK URL COUNTER
# Returns: Nothing

args_for_generic () {
	printf "%s\n" "$1" "$2"
}

rewrite_url () {
	if [ -z "$_ipfs_checked" ];then
		if ! curl -s "$ipfs_gateway" > /dev/null 2>&1 ;then
			ipfs_gateway=https://ipfs.io
		fi
		_ipfs_checked=1
	fi

	case $url in
		ipns://* )
			url=$ipfs_gateway/ipns/${url#ipns://}
		;;
	esac
}

maybe_update () {
	if [ "$always_update" -eq 1 ];then
		update
	fi
}

format_msg (){
	if ! have_cmd "$formatter" ;then
		formatter=cat
	fi
	export color_nick color_time color_hashtag color_mention use_color formatter
	awk '
		BEGIN {
			FS="\t"
			ORS="\n\n"
			csi = "\033["
			reset = csi "0m"
			fg = 3
			bg = 4
			colors["black"] = 0
			colors["red"] = 1
			colors["green"] = 2
			colors["yellow"] = 3
			colors["blue"] = 4
			colors["magenta"] = 5
			colors["cyan"] = 6
			colors["white"] = 7
		}

		function colorize ( layer, color, text ) {
			return csi layer colors[color] "m" text reset
		}

	{
		nick=$1;url=$2;props=$3;ts=$4;msg=$5
		if ( ENVIRON["use_color"] == 1 ) {
			n = split(props,prop_array,/,/)
			props=""
			for ( i in prop_array ) {
				if ( prop_array[i] == "tls" || prop_array[i] == "gpg_trusted" ) {
					prop_array[i] = colorize(fg,"green",prop_array[i])
				}
			}

			props = prop_array[1]
			for (i = 2; i <= n; i++)
				props = props "," prop_array[i]

			nick = csi fg colors[ENVIRON["color_nick"]] "m" nick reset
			ts = csi fg colors[ENVIRON["color_time"]] "m" ts reset
			gsub(/#[[:alnum:]_]+/, csi fg colors[ENVIRON["color_hashtag"]] "m&" reset, msg)
			gsub(/@[[:alnum:]_]+/, csi fg colors[ENVIRON["color_mention"]] "m&" reset, msg)
		}
		fmt = ENVIRON["formatter"]
		printf "* %s (%s) [%s]\n", nick, ts, props
		print msg | fmt
		close(fmt)
	}'
}

limit () {
	if [ -n "$limit" ] && [ "$limit" -gt 0 ];then
		sed "${limit}q"
	else
		cat
	fi
}

sort_tweets () {
	if [ "$sort_order" = "ascending" ];then
		_sort_switches=
	elif [ "$sort_order" = "descending" ];then
		_sort_switches=-r
	else
		die "Unknown sort_order '$sort_order'. Must be either ascending or descending."
	fi

	awk '
		BEGIN { OFS=FS="\t"; OFMT="%f" }
		$4 && $5 {
			ts=$4
			sub(/Z$/,"+00:00",ts)
			no_fields = split(ts,ta,/[T:+.-]/)
			seconds = (ta[1]-1970)*31557600 + ta[2] * 2628000 + ta[3] * 86400 + ta[4] * 3600 + ta[5] * 60 + ta[6]
			if ( no_fields == 9 ) {
				offset = ta[8] * 3600 + ta[9] * 60
				fracsecs=ta[7]
			}
			else {
				offset = ta[7] * 3600 + ta[8] * 60
				fracsecs=0
			}
			mod = substr(ts,length(ts)-5,1)
			if ( mod == "+" ) {
				seconds -= offset
			} else {
				seconds += offset
			}
			print seconds, fracsecs, $0
		}
	' | sort -rn -k1,2 | limit | sort $_sort_switches -k1,2 | cut -f 3-
}

maybe_pager () {
	if [ "$use_pager" -eq 1 ];then
		$pager
	else
		cat
	fi
}

in_list () {
	case " $1 " in
		*\ $2\ * ) return 0 ;;
		* ) return 1 ;;
	esac
}

prefix_columns () {
	awk -vnick="$1" -vurl="$2" -vprops="$3" 'BEGIN{OFS="\t"}{print nick,url,props,$0}'
}

filter_tweets () {
	filter_expr="${filter_expr:-1}"
	awk -F"\t" '{nick=$1;url=$2;props=$3;ts=$4;msg=$5; if ('"$filter_expr"') { print } }'
}

display_tweets () {
	remove_escape_seq | filter_tweets | sort_tweets | collapse_mentions | format_msg | maybe_pager
}

remove_escape_seq () {
	sed 's/[^[:print:][:space:]]//g'
}

gpg_verify () {
	gpg --status-fd=1 --no-verbose --quiet --batch --verify "$cache_dir/twtfiles/$1.txt" 2>/dev/null
}

collapse_mentions () {
	## TODO this *has* to be easier
	awk -v follow_file="$follow_file" '
		BEGIN {
			FS=" "
			while ( (getline < follow_file) > 0 ) {
				urls[$2]=$1
			}
			FS="\t"
			OFS=FS
		}
		{
			new_msg=""
			while ( match($5,/@<[^>]+>/) ) {
				new_msg = new_msg substr($5,1,RSTART-1)
				n = split(substr($5,RSTART+2,RLENGTH-3),fields," ")
				if ( n == 1 ) {
					url = fields[1]
				} else {
					url = fields[2]
				}
				if ( url in urls ) {
					new_msg = new_msg "@" urls[url]
				}
				else {
					new_msg = new_msg substr($5,RSTART,RLENGTH)
				}
				$5 = substr($5,RSTART+RLENGTH)
			}
			new_msg = new_msg $5
			$5=new_msg
			print
		}
	'
}

expand_mentions () {
	awk -v follow_file="$follow_file" '
		BEGIN {
			FS=" "
			while ( (getline < follow_file) > 0 ) {
				nicks[$1]=$2
			}
			FS="\t"
			OFS=FS
		}
		{
			## TODO Bruteforcing, replace with something sane in the future
			for ( nick in nicks ) {
				gsub("@" nick, "@<" nick " " nicks[nick] ">", $2)
			}
			print
		}
	'
}

draft_to_twtfile () {
	_fracsecs=0
	_timestamp=$(TZ=C date "+%Y-%m-%dT%H:%M:%S.%%06iZ")
	while read msg;do
		[ -n "$msg" ] || continue
		printf "$_timestamp\t%s\n" "$_fracsecs" "$msg"
		_fracsecs=$(( $_fracsecs + 1 ))
	done < "$draft_file" | expand_mentions >> "$twtfile"
	publish
}

cleanup () {
	[ -e "$tempfile" ] && rm "$tempfile"
	[ -d "$tempdir" ] && rm -r "$tempdir"
}

post_tweet_hook () {
	:
}

read_key () {
	_key=
	if [ -t 0 ];then
		if [ -z "$_stty" ];then
			_stty=$(stty -g)
		fi
		stty -echo -icanon min 1
		_key=$(dd bs=1 count=1 2>/dev/null)
		stty "$_stty"
	fi
}

getline () {
	_var=${2:-_line}
	if [ -t 0 ];then
		if [ -n "$BASH_VERSION" ];then
			read -ep "$1: " $_var
		else
			printf "%s: " "$1"
			IFS= read -r $_var
		fi
	fi
}

yesno () {
	printf "%s [yN] " "$1"
	read_key
	case $_key in
		y ) _rc=0 ;;
		* ) _rc=1 ;;
	esac
	printf "\n"
	return $_rc
}

################
## Subcommands #
################

update () {
	[ -f "$follow_file" ] || return

	if [ "$disclose_identity" -eq 1 ] && [ -n "$twturl" ];then
		user_agent="txtnish/$VERSION (+${twturl}; @${nick:-$USER})"
	else
		user_agent="txtnish/$VERSION (+https://github.com/mdom/txtnish)"
	fi

	case $http_backend in
		wget )  create_dir "$cache_dir/wget/"
			_get_args=args_for_wget
			;;
		curl )  _get_args=args_for_curl ;;
		*?*  )  _get_args=args_for_generic ;;
		*    )  die "Missing http_backend. Please install wget or curl.\n"
	esac

	_no_args=$( $_get_args | wc -l )

	while read nick url;do
		rewrite_url
		$_get_args "$nick" "$url"
	done < "$follow_file" | xargs -d "\n" -n$_no_args -P "$max_procs" "$http_backend" $http_backend_args
	_http_rc=$?

	for logfile in "$log_dir"/http.log.*;do
		nick="${logfile##*.}"
		awk -vnick="$nick" '{print nick ": " $0 }' "$logfile"
		rm "$logfile"
	done > "$log_dir"/http.log

	if [ "$http_backend" = "wget" ];then
		while read nick url;do
			_twtfile="$cache_dir/wget/${url#*://}"
			_twtfile=${_twtfile%%#*}
			if [ -d "$_twtfile" ] && [ -e "$_twtfile/index.html" ];then
				_twtfile="$_twtfile/index.html"
			fi
			if [ -e "$_twtfile" ];then
				ln -sf "$_twtfile" "$cache_dir/twtfiles/$nick.txt"
			fi
		done < "$follow_file"
	fi

	if [ "$_http_rc" -ne 0 ] ;then
		printf "http_backend returned errors, see $log_dir/http.log for details.\n" >&2
	fi
}


follow () {
	new_nick=$1
	new_url=$2

	[ -n "$new_nick" ] || usage "Required parameter NICK is missing."
	[ -n "$new_url"  ] || usage "Required parameter URL is missing."

	tempfile="$follow_file.$$"
	while read nick url;do
		if [ "$nick" = "$new_nick" ] || [ "$url" = "$new_url" ];then
			die "You're already following $nick at $url."
		fi
		printf "$nick $url\n";
	done < "$follow_file" > "$tempfile"
	printf "$new_nick $new_url\n" >> "$tempfile";
	mv "$tempfile" "$follow_file"
}

unfollow () {
	old_nick=$1
	[ -n "$old_nick" ] || usage "Required parameter NICK is missing."
	tempfile="$follow_file.$$"
	removed=
	while read nick url;do
		if [ "$nick" = "$old_nick" ];then
			removed=1
		else
			printf "$nick $url\n";
		fi
	done < "$follow_file" > "$tempfile"
	if [ -n "$removed" ];then
		mv "$tempfile" "$follow_file"
	else
		die "You're not following $old_nick."
	fi
}

following () {
	cat "$follow_file"
}

tweet () {
	: >"$draft_file"

	if [ $# -eq 0 ];then
		if [ -t 0 ];then
			"$EDITOR" "$draft_file"
		else
			cat > "$draft_file"
		fi
	else
		printf "%s\n" "$@" > "$draft_file"
	fi
	draft_to_twtfile
}

reply () {
	maybe_update
	use_pager=0
	use_color=0
	if [ -n "$1" ];then
		view "$1" | sed -e 's/^/# /' -e 's/^# $//' > "$draft_file"
	else
		timeline | sed -e 's/^/# /' -e 's/^# $//' > "$draft_file"
	fi
	$editor "$draft_file"
	tempfile="$draft_file.$$"
	sed -e '/^# /d' -e '/^[[:space:]]*$/d' "$draft_file" > "$tempfile"
	mv "$tempfile" "$draft_file"
	if [ -s "$draft_file" ];then
		draft_to_twtfile
	fi
}

timeline () {
	maybe_update;

	have_gpg=0
	if have_cmd gpg ;then
		have_gpg=1
	fi

	while read nick url;do

		if [ $# -ne 0 ] && ! in_list "$*" "$nick";then
			continue
		fi

		[ -e "$cache_dir/twtfiles/$nick.txt" ] || continue

		if [ "$have_gpg" -eq 1 ];then
			gpg_status="$(gpg_verify "$nick")"
			case $gpg_status in
				*NODATA*   ) prop=gpg_unsigned ;;
				*NOPUBKEY* ) prop=gpg_signed ;;
				*VALIDSIG* ) prop=gpg_trusted ;;
				*          ) prop=gpg_unknown ;;
			esac
		fi

		case $url in
			https://* ) prop="${prop:+$prop,}tls" ;;
			* ) prop="${prop:+$prop,}notls" ;;
		esac

		prefix_columns "$nick" "$url" "$prop" < "$cache_dir/twtfiles/$nick.txt"
	done < "$follow_file" | display_tweets
}

publish () {
	if [ "$ipfs_publish" -eq 1 ];then
		_ipfs_path="$twtfile"
		if [ "$ipfs_wrap_with_dir" -eq 1 ];then
			_ipfs_args=-w
		fi
		if [ "$ipfs_recursive" -eq 1 ];then
			_ipfs_args="$ipfs_args -r"
			_ipfs_path="${twtfile%/*}"
		fi
		if ipfs add -q $ipfs_args "$_ipfs_path" > "$cache_dir/ipfs";then
			awk 'END{ print $1 }' "$cache_dir/ipfs" | xargs ipfs name publish
		fi
	fi
	if [ "$sign_twtfile" -eq 1 ];then
		if mkdir "$cache_dir/tmp.$$/";then
			tempdir="$cache_dir/tmp.$$/"
		else
			die "Can't create temporary dir $tempdir"
		fi
		if gpg --clearsign --output "$tempdir/${twtfile##*/}" "$twtfile";then
			twtfile="$tempdir/${twtfile##*/}"
		else
			die "Can't sign twtfile. Exiting";
		fi
	fi
	if [ -n "$scp_user" ] && [ -n "$scp_host" ];then
		scp "$twtfile" "$scp_user"@"$scp_host":"${scp_remote_name:-${twtfile##*/}}"
	fi
	if [ -n "$ftp_user" ] && [ -n "$ftp_host" ];then
		curl -nT "$twtfile" ftp://"$ftp_user"@"$ftp_host"/"${ftp_remote_name:-${twtfile##*/}}"
	fi
	post_tweet_hook
}

quickstart () {

	## Import settings from twtxt

	if [ -e "${XDG_CONFIG_HOME:-$HOME/.config}/twtxt/config" ];then
		if ! [ -e "$follow_file" ] && yesno "Import followings from twtxt?" ;then

			twtxt following | awk '{ print $1, $3 }' > "$follow_file"
		fi

		if ! [ -e "$config_file" ] && primpt "Import settings from twtxt?" ;then
			nick=$(twtxt config get nick)
			twturl=$(twtxt config get twturl)
			limit=$(twtxt config get limit_timeline)
			twtfile=$(twtxt config get twtfile)
			sort_order=$(twtxt config get sorting)

			{
				[ -n "$nick" ]       && printf "nick=$nick\n"
				[ -n "$twturl" ]     && printf "twturl=$twturl\n"
				[ -n "$limit" ]      && printf "limit=$limit\n"
				[ -n "$twtfile" ]    && printf "twtfile=$twtfile\n"
				[ -n "$sort_order" ] && printf "sort_order=$sort_order\n"

			} > "$config_file"
		fi
	fi

	## Quickstart for new users

	getline "Please enter your desired nick" nick
	getline "Please enter the desired location for your twtxt file" twtfile
	getline "Please enter the URL your twtxt file will be accessible from" twturl
	if yesno "Do you want to disclose your identity? Your nick and URL will be shared when making HTTP requests?";then
		disclose_identity=1
	fi

	if yesno "Import urls to follow we-are-twtx?" ;then
		curl -Ss https://raw.githubusercontent.com/mdom/we-are-twtxt/master/we-are-twtxt.txt | \
			xargs -n2 txtnish follow
	fi

	if yesno "Do you want to upload your twtfile with scp?";then
		getline "Please enter your scp username" scp_user
		getline "Pleaser enter scp host" scp_host
	fi

	if yesno "Do you want to upload your twtfile with ftp?";then
		getline "Please enter your ftp username" ftp_user
		getline "Pleaser enter ftp host" ftp_host
	fi

	if yesno "Write configuration to $config_file?";then
		if [ -e "$config_file" ];then
			mv "$config_file" "$config_file.bak"
			printf "Backup old config to $config_file.bak\n"
		fi
		cat <<-EOF > "$config_file"
			nick="$nick"
			twturl="$twturl"
			twtfile="$twtfile"
			disclose_identity="$disclose_identity"
EOF
		if [ -n "$scp_user" ] && [ -n "$scp_host" ];then
			cat <<-EOF >> "$config_file"
				scp_user="$scp_user"
				scp_host="$scp_host"
EOF
		fi
		if [ -n "$ftp_user" ] && [ -n "$ftp_host" ];then
			cat <<-EOF >> "$config_file"
				ftp_user="$ftp_user"
				ftp_host="$ftp_host"
EOF
		fi
		printf "Write new configuration to $config_file\n"
	fi


}

########################
# Command line parsing #
########################

call_mode () {
	while getopts ":$options" opt; do
		case $opt in
			l ) limit="$OPTARG" ;;
			h ) usage ;;
			p ) use_pager=1 ;;
			P ) use_pager=0 ;;
			u ) always_update=1 ;;
			U ) always_update=0 ;;
			a ) sort_order=ascending ;;
			d ) sort_order=descending ;;
			N ) max_procs="$OPTARG" ;;
			S ) filter_expr="$OPTARG" ;;
			B ) http_backend="$OPTARG" ;;
			: ) usage "Option -$OPTARG requires an argument." ;;
			\? ) usage "Invalid option -$OPTARG." ;;
		esac
	done
	shift $(( OPTIND - 1 ))
	$mode "$@"
}

usage_main () {
	if [ -n "$1" ];then
		printf "$1\n" >&2;
		exec >&2
	fi
	cat <<-EOF
		usage: $program_name COMMAND [OPTIONS...]

		  Command:
		    tweet          Append a new tweet to your twtxt file.
		    timeline       Retrieve your personal timeline.
		    follow         Add a new source to your followings.
		    unfollow       Remove an existing source from your followings.
		    following      Return the list of sources you're following.
		    reply          Reply to tweets.
		    publish        Publish your twtfile.

		  Options:
		    -h      Print a help message and exit.
		    -v      Print version and exit.

EOF
	if [ -n "$1" ];then
		exit 1
	else
		exit 0
	fi
}

usage () {
	_err=$1
	if [ -n "$_err" ];then
		printf "$_err\n" >&2
		exec >&2
	fi

	cat <<-EOF
		usage: $program_name $mode [OPTIONS...]${arguments:+ $arguments}

		Synopsis:
		  $synopsis

		Options:
EOF

	while [ -n "$options" ] ;do
		c=${options%${options#?}}
		case $c in
			h ) printf "  -h     Print a help message and exit.\n" ;;
			l ) printf "  -l NUM Limit total numer of tweets shown.\n" ;;
			a ) printf "  -a     Sort timeline in ascending order.\n" ;;
			d ) printf "  -d     Sort timeline in descending order.\n" ;;
			p ) printf "  -p     Use pager to display content.\n" ;;
			P ) printf "  -P     Do not use pager to display content.\n" ;;
			u ) printf "  -u     Update sources.\n" ;;
			U ) printf "  -U     Do not update sources.\n" ;;
			N ) printf "  -N NUM Use NUM parallel download processes.\n" ;;
			S ) printf "  -S EXP Filter tweets\n" ;;
			B ) printf "  -B ARG Specify which http backend to use (wget or curl).\n" ;;
			c ) printf "  -c CFG Specify a custom config file location.\n" ;;
		esac
		options=${options#?}
	done

	## Always end usage with a empty line
	printf "\n"

	if [ -n "$_err" ];then
		exit 1
	else
		exit 0
	fi
}

#########
## Main #
#########

trap cleanup EXIT

create_dir "$config_dir"
create_dir "$cache_dir"
create_dir "$cache_dir/twtfiles/"
create_dir "$log_dir"

if ! have_cmd curl && have_cmd wget;then
	http_backend=wget
fi

while getopts ":c:hv" opt;do
	case $opt in
		v ) printf "$VERSION\n"; exit 0  ;;
		h ) usage_main ;;
		c )
			config_file="$OPTARG"
			if ! [ -e "$config_file" ];then
				die "Missing configuration file '$config_file'";
			fi
			;;
		: ) usage_main "Option -$OPTARG requires an argument." ;;
		\? ) usage_main "Invalid option -$OPTARG." ;;
	esac
done

shift $(($OPTIND - 1))

read_config

mode=$1

if [ -z "$mode" ];then
	usage_main
	exit 1
fi

shift

case $mode in
	update )
		synopsis="Fetching new twtfiles from all your sources."
		options="hN:B:"
		call_mode "$@"
		;;
	follow )
		synopsis="Add a new source to your followings."
		arguments="NICK SOURCE"
		options="h"
		call_mode "$@"
		;;
	unfollow )
		synopsis="Remove an existing source from your followings."
		arguments="NICK"
		options="h"
		call_mode "$@"
		;;
	following )
		synopsis="Return the list of sources you're following."
		options="h"
		call_mode "$@"
		;;
	timeline | view )
		synopsis="Display timeline."
		arguments="[NICK...]"
		options="hl:adpPuUN:S:B:"
		call_mode "$@"
		;;
	reply )
		synopsis="Reply to tweets."
		arguments="[NICK]"
		options="hl:aduUN:S:B:"
		call_mode "$@"
		;;
	publish )
		synopsis="Publish your twtfile."
		options="h"
		call_mode "$@"
		;;
	tweet )
		synopsis="Append a new tweet to your twtxt file."
		arguments="[TWEET...]"
		options="h"
		call_mode "$@"
		;;
	quickstart )
		synopsis="Import settings from twtxt."
		options="h"
		call_mode "$@"
		;;
	* ) printf "Unknown mode $mode.\n" >&2; usage_main; exit 1;;
esac

exit 0
